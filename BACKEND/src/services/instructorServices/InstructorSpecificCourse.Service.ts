import { Types } from 'mongoose'
import { IInstructorCourseSpecificDashboardRepository } from '../../repositories/instructorRepository/interfaces/IInstructorSpecificCourseDashboardRepository'
import { IInstructorSpecificCourseDashboardService } from './interfaces/IInstructorSpecificCourseService'

// Service class that handles dashboard operations for a specific course of an instructor
export class InstructorSpecificCourseDashboardService
  implements IInstructorSpecificCourseDashboardService
{
  constructor(
    private dashboardRepository: IInstructorCourseSpecificDashboardRepository, // Injected repository dependency
  ) {}

  /**
   * Get the overall dashboard details for a specific course
   * Fetches revenue, enrollment count, category, monthly performance, and full course price
   * Executes all queries in parallel for better performance
   */
  async getCourseDashboard(courseId: Types.ObjectId) {
    const [revenue, enrollments, category, monthlyPerformance, fullPrice] = await Promise.all([
      this.dashboardRepository.getCourseRevenue(courseId), // Total revenue generated by the course
      this.dashboardRepository.getCourseEnrollmentCount(courseId), // Total number of enrollments
      this.dashboardRepository.getCourseCategory(courseId), // Category of the course
      this.dashboardRepository.getMonthlyPerformance(courseId), // Monthly sales/performance trend
      this.dashboardRepository.getCoursePrice(courseId), // Full listed price of the course
    ])

    // Return combined course dashboard data
    return { fullPrice, revenue, enrollments, category, monthlyPerformance }
  }

  /**
   * Get a detailed revenue report for a specific course
   * - Supports multiple ranges (daily, weekly, monthly, yearly, custom)
   * - Supports pagination (page, limit)
   * - Can also filter between startDate and endDate (for custom ranges)
   */
  async getCourseRevenueReport(
    courseId: Types.ObjectId,
    range: 'daily' | 'weekly' | 'monthly' | 'yearly' | 'custom',
    page: number,
    limit: number,
    startDate?: Date,
    endDate?: Date,
  ) {
    return this.dashboardRepository.getCourseRevenueReport(
      courseId,
      range,
      page,
      limit,
      startDate,
      endDate,
    )
  }
}
